statements  : NEWLINE* expr (NEWLINE+ expr)* NEWLINE

expr        : Keyword:var IDENTIFIER ASSIGNMENTOP expr
            | comp-expr ((("&&" | "||") | (Keyword:and | Keyword:or))comp-expr)*

comp-expr   : Keyword:not comp-expr
            | arithm-expr ((RELATIONALOP) arithm-expr)*

arithm-expr : term ((PLUS|MINUS) term)*

term        : factor ((MUL|DIV) factor)*

factor      : (PLUS|MINUS) factor
            | power

power       : call (POW factor)*

call        : atom (LEFTPARENTHESIS (expr (COMMA expr)*)? RIGHTPARENTHESIS)?

atom        : IDENTIFIER|INT|FLOAT
            | LEFTPARENTHESIS expr RIGHTPARENTHESIS
            | list-expr
            | if-expr
            | for-expr
            | while-expr
            | func-def

list-expr   : LEFTSQUAREPARENTHESIS (LEFTPARENTHESIS (expr (COMMA expr)*)? RIGTHSQUAREPARENTHESIS

if-expr     : Keyword:if expr Keyword:then
              (expr if-expr-b|if-expr-c?)
            | (NEWLINE statements Keyword:end|if-expr-b|if-expr-c)

if-expr-b   : Keyword:elif expr Keyword:then
              (expr if-expr-b|if-expr-c?)
            | (NEWLINE statements Keyword:end|if-expr-b|if-expr-c)

if-expr-c   : Keyword:else 
              expr
            | (NEWLINE statements Keyword:end)

for-expr    : Keyword:for IDENTIFIER ASSIGNMENTOP expr Keyword:to expr
              (Keyword:step expr)? Keyword:then 
              expr
            | (NEWLINE statements Keyword:end)

while-expr  : Keyword:while expr Keyword:then 
              expr
            | (NEWLINE statements Keyword:end)

func-def    : Keyword:def IDENTIFIER? LEFTPARENTHESIS 
              (IDENTIFIER (COMMA IDENTIFIER)*)? RIGHTPARENTHESIS
              (ARROW expr)
            | (NEWLINE statements Keyword:end)